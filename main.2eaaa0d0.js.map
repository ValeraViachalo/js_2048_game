{"version":3,"sources":["scripts/mesageText.js","scripts/main.js"],"names":["message","document","querySelector","hideMesagge","setTimeout","classList","add","messageText","eventMessage","remove","innerText","board","startButton","skipButton","gameScore","fieldRows","querySelectorAll","isWon","isLose","rows","columns","score","tilesMoved","xDown","yDown","updateTile","tile","num","value","setGame","r","length","fieldRowCells","c","id","isGameWon","gameOver","canTilesSlide","hasEmptyTile","setTwoTiles","found","randomCellNumber","Math","random","floor","getElementById","handleStartGame","handleSkip","handleTouchStart","evt","firstTouch","touches","clientX","clientY","handleTouchMove","xUp","yUp","xDiff","yDiff","abs","slideLeft","slideRight","slideUp","slideDown","handleTouchEnd","handleKeyUpEvent","keyEvent","code","filterZero","row","filter","currentNumber","slide","currentRow","i","push","arraysEqual","originalRow","reverse","toString","window","onload","addEventListener"],"mappings":"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","file":"main.2eaaa0d0.js","sourceRoot":"..\\src","sourcesContent":["const message = document.querySelector('.message');\n\nfunction hideMesagge() {\n  setTimeout(() => {\n    message.classList.add('hidden');\n  }, 1000);\n}\n\nexport function messageText(eventMessage) {\n  message.classList.remove('hidden');\n  message.classList.add('message');\n\n  switch (eventMessage) {\n    case 'start': {\n      message.innerText = 'Press \"Start\" to begin game. Good luck!';\n      message.classList.add('message-start');\n      break;\n    }\n\n    case 'win': {\n      message.innerText = 'Winner! Congrats! You did it!';\n\n      message.classList\n\n        .add('message-win');\n      break;\n    }\n\n    case 'wrong-key': {\n      message.innerText = 'Wooops wrong key!';\n      hideMesagge();\n      break;\n    }\n\n    case 'lose': {\n      message.innerText = ' You lose! Restart the game?';\n\n      message.classList.add('message-lose');\n      break;\n    }\n\n    case 'skip': {\n      // eslint-disable-next-line max-len\n      message.innerText = 'The skip button is created just for checking if you can win without sitting for 30 minutes, as I did))))';\n\n      message.classList.add('message-lose');\n      break;\n    }\n\n    default: {\n      message.innerText = ' Something went wrong! Let\\'s just reload tab?';\n      break;\n    }\n  }\n}\n","import { messageText } from './mesageText';\n\nconst message = document.querySelector('.message');\n\nconst startButton = document.querySelector('#start');\nconst skipButton = document.querySelector('#skip');\n\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\n\nlet isWon = false;\nlet isLose = false;\n\nconst rows = 4;\nconst columns = 4;\n\nlet board;\nlet score = 0;\nlet tilesMoved = false;\n\nlet xDown = null;\nlet yDown = null;\n\nwindow.onload = function() {\n  setGame();\n  messageText('start');\n};\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = 'field-cell';\n\n  if (num > 0) {\n    tile.innerText = num;\n    tile.classList.add(`field-cell--${num}`);\n  }\n}\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < fieldRows.length; r++) {\n    const fieldRowCells = fieldRows[r].querySelectorAll('.field-cell');\n\n    for (let c = 0; c < fieldRowCells.length; c++) {\n      fieldRowCells[c].id = `${r}-${c}`;\n\n      const num = board[r][c];\n\n      updateTile(fieldRowCells[c], num);\n    }\n  }\n}\n\nfunction isGameWon() {\n  const finalCell = document.querySelector('.field-cell--2048');\n\n  if (finalCell) {\n    messageText('win');\n    isWon = true;\n  }\n}\n\nfunction gameOver() {\n  if (!canTilesSlide()) {\n    messageText('lose');\n    isLose = true;\n  }\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setTwoTiles() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const randomCellNumber = Math.random() <= 0.1 ? 4 : 2;\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = randomCellNumber;\n\n      const tile = document.getElementById(`${r}-${c}`);\n\n      tile.innerText = `${randomCellNumber}`;\n      tile.classList.add(`field-cell--${randomCellNumber}`);\n      found = true;\n    }\n  }\n}\n\nfunction handleStartGame() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n\n      tile.innerText = '';\n      tile.classList.value = 'field-cell';\n      board[r][c] = 0;\n    }\n\n    score = 0;\n    gameScore.innerText = 0;\n  }\n\n  setTwoTiles();\n  setTwoTiles();\n\n  isWon = false;\n  isLose = false;\n\n  message.classList.value = 'hidden';\n\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n  startButton.innerText = 'Restart';\n\n  skipButton.classList.remove('hidden');\n\n  setTimeout(() => {\n    skipButton.classList.add('hidden');\n  }, 5000);\n}\n\nfunction handleSkip() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n\n      tile.innerText = '128';\n      tile.classList.value = 'field-cell field-cell--128';\n      board[r][c] = 128;\n    }\n\n    score = 0;\n  }\n\n  isLose = false;\n\n  messageText('skip');\n  skipButton.classList.add('hidden');\n}\n\nfunction handleTouchStart(evt) {\n  const firstTouch = evt.touches[0];\n\n  xDown = firstTouch.clientX;\n  yDown = firstTouch.clientY;\n}\n\nfunction handleTouchMove(evt) {\n  if (!xDown || !yDown) {\n    return;\n  }\n\n  const xUp = evt.touches[0].clientX;\n  const yUp = evt.touches[0].clientY;\n\n  const xDiff = xDown - xUp;\n  const yDiff = yDown - yUp;\n\n  if (!isWon && !isLose) {\n    if (Math.abs(xDiff) > Math.abs(yDiff)) {\n      if (xDiff > 0) {\n        slideLeft();\n      } else {\n        slideRight();\n      }\n    } else {\n      if (yDiff > 0) {\n        slideUp();\n      } else {\n        slideDown();\n      }\n    }\n  }\n\n  xDown = null;\n  yDown = null;\n\n  if (tilesMoved) {\n    setTwoTiles();\n    gameOver();\n    isGameWon();\n  }\n\n  tilesMoved = false;\n  gameScore.innerText = score;\n}\n\nfunction handleTouchEnd() {\n  xDown = null;\n  yDown = null;\n}\n\nfunction handleKeyUpEvent(keyEvent) {\n  if (!isWon && !isLose) {\n    switch (keyEvent.code) {\n      case 'ArrowLeft':\n        slideLeft();\n        break;\n\n      case 'ArrowRight':\n        slideRight();\n        break;\n\n      case 'ArrowUp':\n        slideUp();\n        break;\n\n      case 'ArrowDown':\n        slideDown();\n        break;\n\n      default:\n        messageText('wrong-key');\n    }\n  }\n\n  if (tilesMoved) {\n    setTwoTiles();\n    gameOver();\n    isGameWon();\n  }\n\n  tilesMoved = false;\n  gameScore.innerText = score;\n}\n\nfunction filterZero(row) {\n  return row.filter(currentNumber => currentNumber !== 0);\n}\n\nfunction slide(row) {\n  let currentRow = row;\n\n  currentRow = filterZero(currentRow);\n\n  for (let i = 0; i < currentRow.length - 1; i++) {\n    if (currentRow[i] === currentRow[i + 1]) {\n      currentRow[i] *= 2;\n      currentRow[i + 1] = 0;\n      score += currentRow[i];\n    }\n  }\n\n  currentRow = filterZero(currentRow);\n\n  while (currentRow.length < columns) {\n    currentRow.push(0);\n  }\n\n  return currentRow;\n}\n\nfunction canTilesSlide() {\n  if (hasEmptyTile()) {\n    return true;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = board[r][c];\n\n      if (\n        (c > 0 && tile === board[r][c - 1])\n        || (c < columns - 1 && tile === board[r][c + 1])\n        || (r > 0 && tile === board[r - 1][c])\n        || (r < rows - 1 && tile === board[r + 1][c])\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction arraysEqual(originalRow, row) {\n  if (originalRow.length !== row.length) {\n    return false;\n  }\n\n  for (let i = 0; i < originalRow.length; i++) {\n    if (originalRow[i] !== row[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const originalRow = [...row];\n\n    row = slide(row);\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n\n    if (!arraysEqual(originalRow, row)) {\n      tilesMoved = true;\n    }\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n    const originalRow = [...row];\n\n    row.reverse();\n\n    row = slide(row);\n\n    row.reverse();\n    board[r] = row;\n\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r.toString()}-${c.toString()}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n\n    if (!arraysEqual(originalRow, row)) {\n      tilesMoved = true;\n    }\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(`${r.toString()}-${c.toString()}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n\n    if (!arraysEqual(originalRow, row)) {\n      tilesMoved = true;\n    }\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const originalRow = [...row];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n\n      const tile = document.getElementById(`${r.toString()}-${c.toString()}`);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n\n    if (!arraysEqual(originalRow, row)) {\n      tilesMoved = true;\n    }\n  }\n}\n\nstartButton.addEventListener('click', handleStartGame);\nskipButton.addEventListener('click', handleSkip);\ndocument.addEventListener('keyup', handleKeyUpEvent);\n\ndocument.addEventListener('touchstart', handleTouchStart, false);\ndocument.addEventListener('touchmove', handleTouchMove, false);\ndocument.addEventListener('touchend', handleTouchEnd, false);\n"]}